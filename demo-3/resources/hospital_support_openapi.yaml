openapi: 3.0.1
info:
  title: Hospital Support
  version: 0.1.0
servers:
- url: "{server}:{port}/hospital-support"
  variables:
    server:
      default: http://localhost
    port:
      default: "9090"
paths:
  /employees:
    get:
      operationId: getEmployees
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      operationId: postEmployees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeEntry'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /employees/{employeeId}:
    get:
      operationId: getEmployeesEmployeeid
      parameters:
      - name: employeeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      operationId: putEmployeesEmployeeid
      parameters:
      - name: employeeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeEntry'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      operationId: deleteEmployeesEmployeeid
      parameters:
      - name: employeeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /inventory-items:
    get:
      operationId: getInventoryItems
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
    post:
      operationId: postInventoryItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemEntry'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /inventory-items/{itemId}:
    get:
      operationId: getInventoryItemsItemid
      parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      operationId: putInventoryItemsItemid
      parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemEntry'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      operationId: deleteInventoryItemsItemid
      parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
components:
  schemas:
    Employee:
      type: object
      allOf:
      - $ref: '#/components/schemas/EmployeeEntry'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
        additionalProperties: false
    EmployeeEntry:
      required:
      - designation
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        designation:
          type: string
      additionalProperties: false
    ErrorPayload:
      required:
      - message
      - method
      - path
      - reason
      - status
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
          format: int64
        reason:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string
    InventoryItem:
      type: object
      allOf:
      - $ref: '#/components/schemas/InventoryItemEntry'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
        additionalProperties: false
    InventoryItemEntry:
      required:
      - description
      - name
      - quantity
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        quantity:
          type: integer
          format: int64
      additionalProperties: false
