openapi: 3.0.1
info:
  title: Hospital
  version: 0.1.0
servers:
- url: "{server}:{port}/hospital"
  variables:
    server:
      default: http://localhost
    port:
      default: "9090"
paths:
  /patients:
    get:
      summary: Get a list of patients
      operationId: getPatients
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
    post:
      summary: Create a new patient
      operationId: postPatients
      requestBody:
        description: 'PatientEntry object to be created '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientEntry'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /patients/{patientId}:
    get:
      summary: Get a patient by ID
      operationId: getPatientsPatientid
      parameters:
      - name: patientId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      summary: Update a patient by ID
      operationId: putPatientsPatientid
      parameters:
      - name: patientId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: 'Patient object to be updated '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientEntry'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      summary: Delete a patient by ID
      operationId: deletePatientsPatientid
      parameters:
      - name: patientId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /records:
    get:
      summary: Get a list of medical records
      operationId: getRecords
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalRecord'
    post:
      summary: Create a new medical record
      operationId: postRecords
      requestBody:
        description: 'MedicalRecord object to be created '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalRecordEntry'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /records/{recordId}:
    get:
      summary: Get a medical record by ID
      operationId: getRecordsRecordid
      parameters:
      - name: recordId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      summary: Update a recoed by ID
      operationId: putRecordsRecordid
      parameters:
      - name: recordId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: 'Medical record object to be updated '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalRecordEntry'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      summary: Delete a record by ID
      operationId: deleteRecordsRecordid
      parameters:
      - name: recordId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /recordsByPatient/{patientId}:
    get:
      summary: Get medical records for a Patient ID
      operationId: getRecordsbypatientPatientid
      parameters:
      - name: patientId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalRecord'
        "404":
          description: NotFound
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
components:
  schemas:
    Date:
      type: object
      description: Date in proleptic Gregorian calendar.
      allOf:
      - $ref: '#/components/schemas/DateFields'
      - $ref: '#/components/schemas/OptionalTimeOfDayFields'
      - type: object
        properties:
          utcOffset:
            $ref: '#/components/schemas/ZoneOffset'
    DateFields:
      required:
      - day
      - month
      - year
      type: object
      properties:
        year:
          type: integer
          format: int64
        month:
          type: integer
          format: int64
        day:
          type: integer
          format: int64
      description: Fields of the Date record.
    ErrorPayload:
      required:
      - message
      - method
      - path
      - reason
      - status
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
          format: int64
        reason:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string
    MedicalRecord:
      type: object
      allOf:
      - $ref: '#/components/schemas/MedicalRecordEntry'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
        additionalProperties: false
    MedicalRecordEntry:
      required:
      - date
      - description
      - patientId
      type: object
      properties:
        patientId:
          type: string
        date:
          $ref: '#/components/schemas/Date'
        description:
          type: string
      additionalProperties: false
    OptionalTimeOfDayFields:
      type: object
      properties:
        hour:
          type: integer
          format: int64
        minute:
          type: integer
          format: int64
        second:
          $ref: '#/components/schemas/Seconds'
      description: TimeOfDay with all the fields beign optional.
    Patient:
      type: object
      allOf:
      - $ref: '#/components/schemas/PatientEntry'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
        additionalProperties: false
    PatientEntry:
      required:
      - dob
      - firstName
      - gender
      - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        dob:
          $ref: '#/components/schemas/Date'
        gender:
          type: string
      additionalProperties: false
    Seconds:
      type: number
      description: Holds the seconds as a decimal value.
      format: double
    ZoneOffset:
      required:
      - hours
      type: object
      properties:
        hours:
          type: integer
          format: int64
        minutes:
          type: integer
          format: int64
        seconds:
          type: number
          description: |-
            IETF zone files have historical zones that are offset by
            integer seconds; we use Seconds type so that this is a subtype
            of Delta
          format: double
      additionalProperties: false
